package com.capgemini.librarymanagementsystemjdbc.dao;

import com.capgemini.librarymanagementsystemjdbc.dto.User;

public class UserDAOImplementation implements UserDAO{

	@Override
	public boolean register(User info) {
		try(FileInputStream	fin = new FileInputStream("dburl.properties")){

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName(pro.getProperty("path")).newInstance();
			String dburl="jdbc:mysql://localhost:3306/library_management_system?user=root&password=root";
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				String query = "insert into admin values (?,?,?,?,?)";
				try(PreparedStatement pstmt = conn.prepareStatement(query)){
					
					pstmt.setString(1, info.getUserId());
					pstmt.setString(2, info.getUserName());
					pstmt.setString(3, info.getMobileNum());
					pstmt.setString(4, info.getEmail());
					pstmt.setString(5, info.getPassword());
					int count = pstmt.executeUpdate();
				} throw new LibraryException("invalid email and password");
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public boolean login(String email, String password) {
		User bean = new User(); 
		try(FileInputStream fin = new FileInputStream("dburl.properties")){
			Properties pro = new Properties();
			pro.load(fin);
			Class.forName(pro.getProperty("path")).newInstance();
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				String query = pro.getProperty("auth_student");
				try(PreparedStatement pstmt = conn.prepareStatement(query)){ 
					pstmt.setString(1, email);
					pstmt.setString(2, password); 

					ResultSet rs = pstmt.executeQuery();
					if(rs.next()) {
						return true;
					}else {
						throw new LibraryException("invalid email and password");	
					}
				} 
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public boolean searchBookName(String bname) {
		Books bean = new Books();
		try(FileInputStream	fin = new FileInputStream("dburl.properties")){

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName(pro.getProperty("path")).newInstance();
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				//String query = pro.getProperty("search_book_name");
				String query ="select * from book where bname=?";
				try(PreparedStatement pstmt = conn.prepareStatement(query)){
					pstmt.setString(1, bname);
					ResultSet rs = pstmt.executeQuery();
					if(rs.next()) {	
						bean.setBookId(rs.getString("bid"));
						bean.setBookName(rs.getString("bname"));
						bean.setAuthor(rs.getString("author"));
						//bean.setCategory(rs.getString("category"));
						//bean.setPublishername(rs.getString("publishername"));
						//return bean;
					} throw new LibraryException("Book Not Found");
				}
			}

		}catch(Exception e) {
			e.printStackTrace();
		}
		return false;
	}

/*	@Override
	public BookBean searchBookAuthor(String bAuthor) {
		BookBean bean = new BookBean();
		try(FileInputStream	fin = new FileInputStream("dburl.properties")){

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName(pro.getProperty("path")).newInstance();
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				String query = pro.getProperty("search_book_author");
				try(PreparedStatement pstmt = conn.prepareStatement(query)){
					pstmt.setString(1, bAuthor);
					ResultSet rs = pstmt.executeQuery();
					if(rs.next()) {	
						bean.setBid(rs.getInt("bid"));
						bean.setBname(rs.getString("bname"));
						bean.setAuthor(rs.getString("author"));
						bean.setCategory(rs.getString("category"));
						bean.setPublishername(rs.getString("publishername"));
						return bean;
					} throw new BookException("Book Not Found");
				}
			}

		}catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public BookBean searchBookType(int bookType) {
		BookBean bean = new BookBean();
		try(FileInputStream	fin = new FileInputStream("dburl.properties")){

			Properties pro = new Properties();
			pro.load(fin);

			Class.forName(pro.getProperty("path")).newInstance();
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				String query = pro.getProperty("search_book_id");
				try(PreparedStatement pstmt = conn.prepareStatement(query)){
					pstmt.setInt(1, bookType);
					ResultSet rs = pstmt.executeQuery();
					if(rs.next()) {	
						bean.setBid(rs.getInt("bid"));
						bean.setBname(rs.getString("bname"));
						bean.setAuthor(rs.getString("author"));
						bean.setCategory(rs.getString("category"));
						bean.setPublishername(rs.getString("publishername"));
						return bean;
					} 
					throw new BookException("Book Not Found");
				}
			}

		}catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<BookBean> getBookIds() {
		try(FileInputStream	fin = new FileInputStream("dburl.properties")){

			Properties pro = new Properties();
			pro.load(fin);
			List<Integer> list = new LinkedList<Integer>();
			Class.forName(pro.getProperty("path")).newInstance();
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				String query = pro.getProperty("get_bookId");
				try(Statement stmt = conn.createStatement()){
					ResultSet rs = stmt.executeQuery(query);
					while(rs.next()) {
						BookBean bean = new BookBean();
						bean.setBid(rs.getInt("bid"));		
					}
					
				}
			}

		}catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public List<BookBean> getBooksInfo() {
		try(FileInputStream	fin = new FileInputStream("dburl.properties")){

			Properties pro = new Properties();
			pro.load(fin);
			List<BookBean> li = new LinkedList<BookBean>();
			Class.forName(pro.getProperty("path")).newInstance();
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				String query = pro.getProperty("get_allBook");
				try(Statement stmt = conn.createStatement()){	
					ResultSet rs = stmt.executeQuery(query);
					while(rs.next()) {	
						BookBean bean = new BookBean();
						bean.setBid(rs.getInt("bid"));
						bean.setBname(rs.getString("bname"));
						bean.setAuthor(rs.getString("author"));
						bean.setCategory(rs.getString("category"));
						bean.setPublishername(rs.getString("publishername"));
						li.add(bean);
					}
					return li;
				}
			}

		}catch(Exception e) {
			e.printStackTrace();
			return null;
		}

	} */

	@Override
	public boolean requestBook(String bookid, String userEmail) {
		try(FileInputStream	fin = new FileInputStream("dburl.properties")){

			Properties pro = new Properties();
			pro.load(fin);
			Class.forName(pro.getProperty("path")).newInstance();
			try(Connection conn = DriverManager.getConnection(pro.getProperty("dburl"), pro)){
				String query = "";
				try(Statement stmt = conn.createStatement()){	
					ResultSet rs = stmt.executeQuery(query);
				}
			}

		}catch(Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	@Override
	public String returnBook(Date bid) {
		// TODO Auto-generated method stub
		return null;
	}


}